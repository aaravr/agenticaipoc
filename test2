@startuml
skinparam sequenceMessageAlign center
skinparam maxMessageSize 250

participant "KYCFlow UI" as UI
participant "KYCFlow Backend" as BE
participant "RDS" as RDS
participant "RAAS Rules" as RAAS

== Initialize Static Data ==
UI -> BE: Get static data options
alt Successful case
    BE --> UI: Return list of request types
else Backend Error
    BE --> UI: Error 500 - Unable to fetch options
    note right of UI
        UI shows error message and 
        retry button to user
    end note
end

== Create New Request ==
UI -> BE: Create new request\n(with selected request type)
alt Successful case
    BE -> BE: Create workflow case
else Validation Error
    BE --> UI: Error 400 - Invalid request type
else System Error
    BE --> UI: Error 500 - System unavailable
    note right of UI
        UI shows error toast and
        allows retry
    end note
end

== Package Creation ==
BE -> RDS: Create package API request\n(request type, context id, CE)
alt Successful case
    RDS --> BE: Package acknowledgment\n(package id)
else RDS Connection Error
    RDS --> BE: Connection timeout
    BE --> UI: Error 503 - RDS unavailable
else Invalid Context
    RDS --> BE: Error 400 - Invalid context
    BE --> UI: Error 400 - Context validation failed
end

== Async Package Processing ==
alt Successful RAAS Integration
    RDS -> RAAS: Get GB non-policy requirements
    RAAS --> RDS: Return GB requirements codes
    RDS -> RAAS: Get CIP Seed data requirements
    RAAS --> RDS: Return CIP requirements codes
else RAAS Service Error
    RAAS --> RDS: Service unavailable
    RDS -> BE: Package processing failed
    BE --> UI: Error - Rules service unavailable
else RAAS Timeout
    RAAS --> RDS: Request timeout
    RDS -> BE: Package processing timeout
    BE --> UI: Error - Processing timeout
end

RDS -> RDS: Construct requirements\n(GB non-policy & CIP seed data)
RDS -> BE: Send package confirmation notification

== Status Polling ==
loop Until package completion or max retries reached
    UI -> BE: Poll package status
    alt Successful case
        BE --> UI: Return current status
    else Backend Error
        BE --> UI: Error 500
        note right of UI
            UI implements exponential backoff
            for retry attempts
        end note
    else RDS Integration Error
        BE --> UI: Error - RDS sync failed
        note right of UI
            UI shows sync error and
            manual refresh option
        end note
    end
end

== Requirements Processing ==
BE -> RDS: Get requirements API call
alt Successful case
    RDS --> BE: Return requirements
    BE -> BE: Store requirements in\nlocal tables
    BE -> BE: Update package status\nto completed
else Data Sync Error
    RDS --> BE: Sync failed
    BE -> BE: Mark sync failed
    BE --> UI: Error - Requirements sync failed
end

== UI Update ==
UI -> BE: Poll package status
alt Successful case
    BE --> UI: Return completed status
    UI -> UI: Show seed data and\nGB non-policy requirement tabs
else Incomplete Requirements
    BE --> UI: Error - Missing requirements
    note right of UI
        UI shows error message with
        missing requirement details
    end note
end

== Requirements Fulfillment ==
UI -> BE: Submit filled seed data requirements
alt Valid Requirements
    BE -> BE: Validate all requirements
else Validation Failed
    BE --> UI: Error 400 - Invalid requirements
    note right of UI
        UI highlights invalid fields
        and shows validation messages
    end note
end

loop For each requirement
    BE -> RDS: Patch API call with\nfulfilled requirement
    alt Successful case
        RDS --> BE: Patch confirmation
    else Patch Failed
        RDS --> BE: Patch failed
        BE -> BE: Log failed requirement
        BE --> UI: Error - Some requirements failed
        note right of UI
            UI shows failed requirements
            and allows retry
        end note
    end
end

== Final Re-execution ==
BE -> RDS: Re-execute API call
alt Successful case
    RDS --> BE: Execution confirmation
    BE -> RDS: Get updated requirements
    RDS --> BE: Return final requirements
else Re-execution Failed
    RDS --> BE: Re-execution failed
    BE --> UI: Error - Re-execution failed
    note right of UI
        UI shows re-execution failure
        and provides retry option
    end note
end

legend right
    Error Handling Strategies:
    * All 5xx errors implement retry with exponential backoff
    * All 4xx errors show appropriate validation messages
    * Timeouts are handled with configurable retry attempts
    * Async operations have monitoring and alerting
    * All errors are logged for debugging
endlegend
@enduml
